(function($){TWP.Util=TWP.Util||{};TWP.Util.User=function(){var initialized=false;var isAuthenticated=false;var userName=null;var userId="";var userEmail="";var userCookie=null;var isFacebookUser=false;var userType="washington-post";var validCookies=["wapo_display"];var authCookies=["wapo_login_id"];var emailCookie=["at"];function parseCookieUserName(cookie,startStr){if(cookie===null||cookie.length===0)return"";var start=-1,end=-1;start=cookie.indexOf(startStr)+startStr.length+1;end=userCookie.indexOf(";",
start)==-1?userCookie.length:userCookie.indexOf(";",start);var userData=cookie.substring(start,end).split("|");var parsedName="";if(userData[3])parsedName=userData[3].replace(/\+/g," ");else if(userData[2]&&userData[2].indexOf("rw%3D")==-1)parsedName=userData[2].replace(/\+/g," ");else parsedName=userData[0];return parsedName}function parseCookieEmail(){var i,x,y,ARRcookies=document.cookie.split(";");for(i=0;i<ARRcookies.length;i++){var x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("\x3d"));var y=
ARRcookies[i].substr(ARRcookies[i].indexOf("\x3d")+1);var x=x.replace(/^\s+|\s+$/g,"");if(x=="at"){var string=unescape(y);var email=string.split("\x3d")[3];var isValidEmail=false;if(email){email=email.split("\x26")[0];if(email)var isValidEmail=validateEmail(email);else return isValidEmail}else return isValidEmail;return email.length>0&&typeof email=="string"&&isValidEmail?email:false}}}function validateEmail(str){var atpos=str.indexOf("@");var dotpos=str.lastIndexOf(".");if(atpos<1||dotpos<atpos+
2||dotpos+2>=str.length)return false;else return true}function setCustomCookie(){var upcUrl=document.location.href;if(upcUrl.indexOf("localhost")>-1){var c=$.cookie("TWPNIUCID");if(typeof c=="undefined"||c==null){var d=new Date;var i="TWPNI"+d.getTime()+"."+Math.round(Math.random()*1E4);d.setTime(d.getTime()+31104E6);$.cookie("TWPNIUCID",i,{domain:TWP.Data.cookie_domain,expires:d,path:"/"})}}if(upcUrl.indexOf("beta")>-1){var c=$.cookie("x-split-override");if(c==null||typeof c=="undefined"){var d=
new Date;d.setTime(d.getTime()+1E3*60*60*24*30);$.cookie("x-split-override","B",{domain:TWP.Data.cookie_domain,expires:d,path:"/"});$.cookie("X-WP-Split","B",{domain:TWP.Data.cookie_domain,expires:d,path:"/"})}}}function convertPersistentToSessionCookie(){var xsplitoverride=$.cookie("x-split-override");if(typeof xsplitoverride!="undefined"&&xsplitoverride!=null){$.cookie("x-split-override",null,{domain:TWP.Data.cookie_domain,path:"/"});$.cookie("x-split-override",xsplitoverride,{domain:TWP.Data.cookie_domain,
path:"/"})}var xwpslit=$.cookie("X-WP-Split");if(typeof xwpslit!="undefined"&&xwpslit!=null){$.cookie("X-WP-Split",null,{domain:TWP.Data.cookie_domain,path:"/"});$.cookie("X-WP-Split",xwpslit,{domain:TWP.Data.cookie_domain,path:"/"})}}return{init:function(){var userCookieName="";for(var a=0;a<authCookies.length;a++)if(document.cookie.indexOf(authCookies[a])!=-1){isAuthenticated=true;break}for(var a=0;a<validCookies.length;a++)if(document.cookie.indexOf(validCookies[a])!=-1){userCookie=document.cookie;
userType=validCookies[a];break}if(isAuthenticated){switch(userType){case "fbuname":userCookieName=parseCookieUserName(userCookie,userType,8);break;default:userCookieName=parseCookieUserName(userCookie,userType,9);break}userCookieName=decodeURIComponent(userCookieName);userName=userCookieName.indexOf("@")!==-1?userCookieName.substring(0,userCookieName.indexOf("@")):userCookieName;userName=userName.replace(/"/gi,"");userId=userCookieName;userEmail=parseCookieEmail()}setCustomCookie()},getUserCookie:function(){return userCookie.length>
0&&typeof userCookie=="string"?userCookie:null},getUserType:function(){return userType.length>0&&typeof userType=="string"?userType:null},getUserId:function(){return userId},getUserName:function(){return typeof userName=="string"?userName:""},getUserEmail:function(){return userEmail.length<0||userEmail==false?null:userEmail},getAuthentication:function(){return isAuthenticated}}}();TWP.Util.User.init()})(window.Zepto||window.jQuery);
/* global __e: true, mobile_browser, TWP_Debug */
/* eslint-disable no-console */
/* eslint-disable no-empty */
(function($) {
  console.log('TWP.Identity');
  // NOTE: Event queue
  __e = window.__e || [];

  window.TWP = window.TWP || {};
  TWP.Identity = TWP.Identity || {};
  TWP.Identity.paywall = TWP.Identity.paywall || {};
  TWP.Identity.paywall.requireTracking = true;
  TWP.server = TWP.server || window.location.href.match(/^.*?:\/\/.*?\//)[0];
  // var isSSL = window.location.protocol.indexOf('https') < 0 ? false : true;
  var currDomain =
    (TWP.Data && TWP.Data.environment == 'prod') ||
    TWP.Data.environment == 'stage'
      ? '.washingtonpost.com'
      : '.digitalink.com';

  var currDocDomain =
    (TWP.Data && TWP.Data.environment == 'prod') ||
    TWP.Data.environment == 'stage'
      ? 'washingtonpost.com'
      : 'digitalink.com';
  // var userCookie = 'wapo_login_id';
  // var wpatcCookie = 'WPATC';
  var actmgmtCookie = 'wapo_actmgmt';
  var gmeCookie = 'wapo_gme';

  var isPWA = !!TWP.PWA;
  var isMobile =
    isPWA || (typeof mobile_browser != 'undefined' && mobile_browser === 1)
      ? true
      : false;
  var tidValues = {
    main: 'sub_s004',
    home: 's_001',
    digital: 's_002',
    gift: 's_003'
  };

  var _qaEnvironment = window.location.host.indexOf('digitalink.com') != -1;

  // NOTE: values set in setPerPageVars
  var expireTime, wapo_gme;
  // NOTE: values set in _openOverlay & messageListener
  var bottomAdClosed, wallClosed;

  /* json response format
        {"pwresp":{"action":0,"url":"N/A","sub":0,"mtr":20,"mtrct":0,"mtfn":1,"t":-1,"st":-1,"loc":0,"mvw":20,"fr":0,"dt":0,"mx":1}}

        Action values:
            action: 3 - paywall
            action: 6 - softwall
            action: 8 - postsuite
            action: 9 - regwall

    */

  /*EVENT MANAGEMENT
     * The following events may be triggered by other code:
        onTwpLoginInit
        onTwpLoginError
        onTwpLoginComplete
        onTwpRegisterInit
        onTwpRegisterComplete
        onTwpWarningFreeAccess  warning overlay link to paywall overlay.  Allows opening of paywall overlay.  Requires pwresp object
        onTwpMastheadComplete - external masthead created, and masthead code added to page


    * The following events  are triggered by this code:
        onTwpMeterReady - when meter api is returned successfully, and TWP.Identity.paywall.pwresp object created
    */

  var setPerPageVars = function() {
    var d = new Date();

    // NOTE: If you add a value here, you must initialize it above where the rest of these variables are initialize
    // NOTE: These variable are not local to this function. They are why this method exists.
    expireTime = d.setHours(d.getHours() + 24);
    // acqTest = $.cookie(acqTestCookie);
    // user = $.cookie(userCookie);
    //  wpatc = $.cookie(wpatcCookie);
    // wapo_actmgmt = $.cookie(actmgmtCookie);
    wapo_gme = $.cookie(gmeCookie);

    TWP.Identity.env = {
      expireTime: expireTime,
      currDomain: currDomain,
      _qaEnvironment: _qaEnvironment,
      actmgmtCookie: actmgmtCookie
    };
  };

  // @todo - consider alternative implementation
  window.setCookie = function(name, value, options) {
    options = options || {};
    if (value === null) {
      value = '';
      options = $.extend({}, options);
      options.expires = -1;
    }
    var expires = '';
    if (
      options.expires &&
      (typeof options.expires == 'number' || options.expires.toUTCString)
    ) {
      var date;
      if (typeof options.expires == 'number') {
        date = new Date();
        date.setTime(date.getTime() + options.expires * 24 * 60 * 60 * 1e3);
      } else date = options.expires;
      expires = '; expires\x3d' + date.toUTCString();
    }
    var path = options.path ? '; path\x3d' + options.path : '';
    var domain = options.domain ? '; domain\x3d' + options.domain : '';
    var secure = options.secure ? '; secure' : '';
    // removed encoding of the cookie value to support the wapo_display
    document.cookie = [name, '\x3d', value, expires, path, domain, secure].join(
      ''
    );
  };

  var _scrollHandler = function() {
    return false;
  };

  function toggleScrolling(scroll) {
    var height = scroll ? '' : '100%';
    var overflow = scroll ? '' : 'hidden';

    $('body,html').css({
      height: height,
      overflow: overflow
    });

    if (scroll) {
      $(document).unbind(
        'touchmove touchend mousewheel mousemove scroll',
        _scrollHandler
      );
    } else {
      $(document).bind(
        'touchmove touchend mousewheel mousemove scroll',
        _scrollHandler
      );
    }
  }
  // consolidate overlay definitions
  function getOverlay(action) {
    var overlay = {
      // should isPWA be isMobile?
      overlay:
        '<div id="wp_Signin" class="simple-overlay closed ' +
        (action === 6 ? 'softwall' : 'content_gate') +
        (isPWA ? ' is-pwa' : '') +
        '" style="overflow: hidden;">' +
        (action !== 6
          ? '<div class="wall_background" style="background-color:black;height:100%;width:100%;opacity:0.5;"></div>'
          : '') +
        '<iframe id="wallIframe" style="position:fixed;bottom:0;height:calc(100% - 60px);" src class="' +
        (isPWA ? 'is-pwa' : '') +
        '" height="100%" width="100%;" scrolling="' +
        (isPWA ? 'yes' : 'auto') +
        '" frameborder="0"></iframe></div>',
      overlayConfig: {
        overlay: 75,
        overlayClass:
          'wp_signin closed ' +
          (action === 6 ? 'softwall' : 'content_gate') +
          (isPWA ? ' is-pwa' : ''),
        modal: false,
        closeClassxxx: 'close',
        toTop: true,
        triggerxxx: '.close',
        bodyClass: 'pw-display',
        onShow: function(h) {
          $(window).scrollTop(0);
          h.w.prependTo(h.o);
          if ($('.pb-f-page-header-v2 .site-header.bar-hidden').length > 0) {
            $('.pb-f-page-header-v2 .site-header').removeClass('bar-hidden');
          }
          var zIndexOverlay =
            parseFloat(
              $('.pb-f-page-breaking-news-bar .breaking-news-bar').css(
                'z-index'
              )
            ) + 1;
          // left navbar has 134217725 z-index
          zIndexOverlay = action === 6 ? 134217720 : zIndexOverlay;
          //h.w.css({"top":cssTop + "px"});
          h.o.css('z-index', zIndexOverlay);
          h.w.css('z-index', zIndexOverlay + 1);
          h.o.prependTo('body');
          /*
          if (typeof h.w.fadeIn == 'function') {
            h.w.fadeIn();
          } else {
            h.w.show();
          }
          setTimeout(function() {
            $('#wp_Signin').css('display', 'block');
          }, 100);
          if (action === 6) {
            toggleScrolling(true);
          } else {
            toggleScrolling(false);
          }
          */
        },
        onHide: function(h) {
          if ($(arguments[0].target).is('.close')) {
            window.location.href = '/';
          }
          toggleScrolling(true);

          if (!!window.s && typeof s.sendDataToOmniture == 'function') {
            var closeVars = {
              eVar1: s.pageName,
              eVar2: s.channel,
              eVar5: s.prop3
            };
            try {
              s.sendDataToOmniture('close overlay', 'event63', closeVars);
            } catch (e) {}
          }
          h.w.hide() && h.o && h.o.remove();
          return true;
        }
      }
    };

    var setCss = function(messagePayload) {
      var cssArray = [
        'top',
        'height',
        'bottom',
        'position',
        'left',
        'right',
        'background',
        'display'
      ];
      var styles = {};
      for (var i = 0; i < cssArray.length; i++) {
        if (messagePayload[cssArray[i]]) {
          styles[cssArray[i]] = messagePayload[cssArray[i]];
        }
      }
      return styles;
    };

    var calcTop = function(topPos, elementSelector) {
      if (topPos == "unset") {
        return "unset";
      }
      // positioning elementSelector, if supplied
      if (elementSelector) {
        try {
          var domElement = document.querySelector(elementSelector);
          if (domElement) {
            var offsetTop =
              domElement.getBoundingClientRect().top + window.pageYOffset;
            return parseInt(topPos, 10) + offsetTop;
          }
        } catch (err) {
          return topPos;
        }
      } else {
        return topPos;
      }
    };

    var messageListener = function(messageData, h) {
      if (typeof messageData.data === 'string') {
        if (messageData.data.indexOf('wallAction') > -1) {
          var messagePayload = {};
          try {
            messagePayload = JSON.parse(messageData.data);
          } catch (ex) {
            return;
          }

          var defaultConfig = {
            top: '60px',
            bottom: '0',
            position: 'absolute',
            left: '0',
            scrollAllowed: false
          };

          var wallAction = messagePayload.wallAction;
          var wallType = messagePayload.wallType;
          //set defaults
          messagePayload = $.extend(defaultConfig, messagePayload);
          var $body = $('body');
          switch (wallAction) {
            case 'open':
              if (messagePayload.scrollAllowed) {
                toggleScrolling(true);
              } else {
                toggleScrolling(false);
                $body.addClass((h && h.c && h.c.bodyClass) || '');
              }

              _showLimitedContent(wallType);

              var $signInIframeWrapper = $('#wp_Signin');
              var $overlayWrapper = $('.wp_signin');
              $overlayWrapper.css({ display: 'none' });

              if (messagePayload.background) {
                var $wallBackground = $('.wall_background');
                $wallBackground.css({
                  background: messagePayload.background
                });
              }

              messagePayload.top = calcTop(
                messagePayload.top,
                messagePayload.element
              );

              messagePayload.display = 'block';
              $('.wp_signin, #wp_Signin').removeClass('closed');

              // set updated css on overlay
              $signInIframeWrapper.css(setCss(messagePayload));
              break;
            case 'close':
              wallClosed = true;
              // restore the page after the regwall is completed
              h.w.jqmHide();
              $body.removeClass((h && h.c && h.c.bodyClass) || '');
              $('.wp_signin').css('display', 'none');
              window.removeEventListener('message', function() {
                messageListener(event, h);
              });
              break;
            case 'resize':
              var messageHeight = messagePayload.height;
              var resizeHeight =
                typeof messageHeight === 'number'
                  ? messageHeight + 'px'
                  : messageHeight;
              if (messagePayload.height) {
                h.w.find('iframe').css('height', resizeHeight);
              }
              break;
            case 'requestGADataLayer':
              var wallGADataObj = (window.dataLayer || [])
                .filter(function(layer) {
                  return (
                    layer.pageName || layer.canonicalUrl || layer.userAgentHit
                  );
                })[0];
              wallGADataObj = wallGADataObj || {};
              wallGADataObj.wallAction = 'GAdataLayer';
              wallGADataObj.fullCanonicalUrl = wp_pb.canonical_url;
              var iframeWindow = document.getElementById('wallIframe')
                .contentWindow;
              iframeWindow.postMessage(JSON.stringify(wallGADataObj), '*');
              break;
            case 'requestPwapiResponse':
              var iframeWindow = document.getElementById('wallIframe')
                .contentWindow;
              iframeWindow.postMessage(JSON.stringify({
                event: 'backfillPwapiResponse',
                ...TWP.Identity.paywall.pwresp
              }), '*');
              break;
            case 'CompleteRegwall':
              break;
            case 'regAuthenticated':
              document.querySelector('div.wall_background').style =
                'opacity:0;';
              break;
            default:
          }
        }
      }
    };

    if (action == 3 || action == 8 || action == 6 || action == 9) {
      // override onShow in order to make the wall dismissable
      var onShowDefault = overlay.overlayConfig.onShow;
      overlay.overlayConfig.onShow = function(h) {
        onShowDefault(h);
        window.addEventListener('message', function() {
          messageListener(event, h);
        });
      };
      return overlay;
    } else {
      return false;
    }
  }

  TWP.Identity.omniture = {
    sub: {
      '-1': 'N/A',
      0: 'Unsubscribed',
      1: 'Subscribed'
    },
    mtr: {
      '-1': 'Unmetered',
      1: 'Metered',
      20: 'Unmetered: content_type',
      21: 'Unmetered: referer',
      22: 'Unmetered: domain'
    },
    tracking: {
      wp_evar60: 'not available',
      wp_evar64: 'not available',
      wp_evar65: 'not available',
      wp_evar66: 'not available'
    },
    overlay: {
      3: 'meter-overlay',
      6: 'dismissible-overlay',
      8: 'content-overlay',
      9: 'reg-overlay'
    }
  };

  TWP.isSignedIn = function() {
    var cookies = document.cookie;
    var idx = cookies.indexOf('wapo_login_id');

    if (idx > -1) {
      return true;
    } else {
      return false;
    }
  };

  TWP.Identity.setAuthenticationLinkForPWA = function() {
    $.fn.appendLinkItems = function(links, surroundingTag) {
      var element = this;
      surroundingTag = surroundingTag || '<li>';
      $.each(links, function(i, link) {
        var a = $('<a>');
        if (link.title) {
          a.text(link.title);
        }
        if (link.html) {
          a.html(link.html);
        }
        if (link.href) {
          a.attr('href', link.href);
        }
        if (link.attr) {
          a.attr(link.attr);
        }
        element.append(
          $(surroundingTag).append(a).addClass(link.selected ? 'selected' : '')
        );
      });
      return this;
    };

    var idenity = {},
      idp;
    idenity.getIdentityProvider = function() {
      return idp;
    };

    idenity.setIdentityMenu = function($el, menu) {
      $el.children('li').remove();
      $el.appendLinkItems(menu);
    };

    idenity.setIdentityProvider = function(provider) {
      var ef = function() {}; //empty function
      idp = {};
      // we'll pad any missing portion with empty function
      idp.name = provider.name || '';
      idp.getUserId = provider.getUserId || ef;
      idp.getProfileMenu = provider.getProfileMenu || ef;
      idp.getSubscribeMenu = provider.getSubscribeMenu || ef;
      idp.getLogOutMenu = provider.getLogOutMenu || ef;
      idp.getSignInMenu = provider.getSignInMenu || ef;
      idp.getSignInLink = provider.getSignInLink || ef;
      idp.getRegistrationLink = provider.getRegistrationLink || ef;
      idp.isUserLoggedIn = provider.isUserLoggedIn || ef;

      idp.userMenu = [];

      idp.render =
        provider.render ||
        function() {
          var $identityEl = $('#logged-in-status');
          if (idp.isUserLoggedIn()) {
            idp.userMenu.push(idp.getProfileMenu());
            if (!wp_pb.StaticMethods.isSubscriber()) {
              idp.userMenu.push(idp.getSubscribeMenu());
            }
            idp.userMenu.push(idp.getLogOutMenu());
          } else {
            idp.userMenu.push(idp.getSignInMenu());
            idp.userMenu.push(idp.getSubscribeMenu());
          }
          idenity.setIdentityMenu($identityEl, idp.userMenu);
        };
    };

    idenity.renderIdentity = function(callback) {
      callback = callback || function() {};
      if (idp) {
        // the user might not have configured any identity. So check for it.
        idp.render();
      }
      callback(idp);
    };

    /*
     * Using the provded API, set up the default identity provider as TWP
     */

    // set a flag so that we don't process login at all
    var showIdentity = true;

    // default Identity
    var current = window.location.href.split('?')[0];
    var twpIdentity = {
      name: 'TWP',
      getUserId: function() {
        var username = TWP.Util.User.getUserName();
        var userid = TWP.Util.User.getUserId();
        if (typeof username == 'string' && username.length > 0) {
          return username;
        } else {
          return userid;
        }
      },
      getProfileMenu: function() {
        return {
          title: 'Profile',
          href: TWP.signin.profileurl + current + '&refresh=true'
        };
      },
      getSubscribeMenu: function() {
        return { title: 'Subscribe', href: TWP.signin.subscribe };
      },
      getLogOutMenu: function() {
        return { title: 'Log out', href: TWP.signin.logouturl_page };
      },
      getSignInMenu: function() {
        return {
          title: 'Sign In',
          href: TWP.signin.loginurl_page + current
        };
      },
      getSignInLink: function() {
        return TWP.signin.loginurl_page + current;
      },
      getRegistrationLink: function() {
        return TWP.signin.registrationurl_page + current;
      },
      isUserLoggedIn: function() {
        return TWP.Util.User ? TWP.Util.User.getAuthentication() : false;
      }
    };

    // If we are showing identity then set the default identity provider to TWP.
    //   User can overide this whenever they want.
    //
    // In TWP, identity user interface needs to processed after the fact that all other javascript has been loaded.
    //   But the js resources are loaded asynchronously and it doesn't have any callbacks hooks. So we watch for it.
    if (showIdentity) {
      //try to load TWP only if we are showing Identity.
      (function checkTWP() {
        // if there's already idp set, then don't try to load TWP.
        if (!idenity.getIdentityProvider()) {
          if (!!window.TWP && !!TWP.signin && !!TWP.Util) {
            // make sure TWP has been loaded.
            idenity.setIdentityProvider(twpIdentity);
            idenity.renderIdentity();
          } else {
            window.setTimeout(function() {
              checkTWP();
            }, 200);
          }
        }
      })();
    }
  };

  TWP.Identity.setAuthenticationLink = function(data) {
    if (typeof data == 'object') {
      $.extend(TWP.Identity.paywall.pwresp, data.pwresp);
    }

    if (
      TWP.server.match(
        /digitalink\.com|washingtonpost\.com|wpprivate\.com/gi
      ) == null
    ) {
      return;
    }

    var wrapperElm = $('#utility-wrapper');
    if (isPWA) {
      TWP.Identity.setAuthenticationLinkForPWA();
      return;
    } else if (wrapperElm.length <= 0) {
      return;
    }
    var userName = '';
    var provider = '';
    var currentURL = window.location.href.split('?')[0];

    TWP.Identity.isSignedIn = TWP.Util.User.getAuthentication();
    if (TWP.Identity.isSignedIn) {
      userName = TWP.Util.User.getUserName();
      provider =
        typeof TWP.signedInProvider == 'function'
          ? TWP.signedInProvider()
          : 'Washington Post';
      provider = typeof provider != 'undefined' ? provider.toLowerCase() : '';
    }

    var freeAccessLink =
      TWP.Identity.paywall.pwresp.fr === 1
        ? '<li class="no-right">' +
          '<a href="' +
          TWP.signin.free_access +
          '">GET FREE ACCESS</a>' +
          '</li>'
        : '';
    var signinLinks = {
      pw: {
        anon:
          '<li id="global-signin"style="min-width:32px;">' +
          '<a href="' +
          TWP.signin.loginurl_page +
          currentURL +
          '">Sign In</a>' +
          '</li>' +
          '<li class="no-right"><a href="' +
          TWP.signin.profileurl +
          currentURL +
          '&refresh=true">My Account </a></li>' +
          freeAccessLink +
          '<ul class="subscribe-links left">' +
          '<li class="no-right subscribe"><a href="' +
          TWP.signin.subscribe +
          '?tid=' +
          tidValues.main +
          '&promo=digital04_header_default&oscode=RPWH&wpsrc=CM0000447&show4=true">SUBSCRIBE: </a></li>' +
          '<li ><a href="' +
          TWP.signin.print_offer +
          'tid=' +
          tidValues.home +
          '&promo=digital06_header_homedelivery&oscode=RPWH&wpsrc=CM0000450">Home Delivery</a></li>' +
          '<li class="no-right"><a href="' +
          TWP.signin.digital_offer +
          'tid=' +
          tidValues.digital +
          '&promo=digital04_header_default&oscode=RPWH&wpsrc=CM0000447">Digital</a></li>' +
          //+ '<li class="no-right"><a href="' + TWP.signin.subscribe + '/gift-subscription.html?landing=1&tid=' + tidValues.gift + '">Gift Subscriptions</a></li>'
          '</ul>',
        0:
          '<li>' +
          (provider.indexOf('facebook') >= 0
            ? '<a class="icon share facebook" '
            : '<a ') +
          ' href="' +
          TWP.signin.profileurl +
          currentURL +
          '&refresh=true"> Hi, ' +
          userName +
          '!</a>' +
          '</li>' +
          '<li><a href="' +
          TWP.signin.profileurl +
          currentURL +
          '&refresh=true">My Account </a></li>' +
          '<li class="no-right"><a href="' +
          TWP.signin.logouturl_page +
          '">Sign Out</a></li>' +
          freeAccessLink +
          '<ul class="subscribe-links left">' +
          '<li class="no-right subscribe"><a href="' +
          TWP.signin.subscribe +
          '?tid=' +
          tidValues.main +
          '&promo=digital04_header_default&oscode=RPWH&wpsrc=CM0000447&show4=true">SUBSCRIBE: </a></li>' +
          '<li ><a href="' +
          TWP.signin.print_offer +
          'tid=' +
          tidValues.home +
          '&promo=digital06_header_homedelivery&oscode=RPWH&wpsrc=CM0000450">Home Delivery</a></li>' +
          '<li class="no-right"><a href="' +
          TWP.signin.digital_offer +
          'tid=' +
          tidValues.digital +
          '&promo=digital04_header_default&oscode=RPWH&wpsrc=CM0000447">Digital</a></li>' +
          //+ '<li class="no-right"><a href="' + TWP.signin.subscribe + '/gift-subscription.html?landing=1&tid=' + tidValues.gift + '">Gifts</a></li>'
          '</ul>',
        1:
          '<li>' +
          (provider.indexOf('facebook') >= 0
            ? '<a class="icon share facebook" '
            : '<a ') +
          ' href="' +
          TWP.signin.profileurl +
          currentURL +
          '&refresh=true">Hi, ' +
          userName +
          '!</a>' +
          '</li>' +
          '<li><a href="' +
          TWP.signin.profileurl +
          currentURL +
          '&refresh=true">My Account </a></li>' +
          '<li class="no-right"><a href="' +
          TWP.signin.logouturl_page +
          '">Sign Out</a></li>' +
          '<ul class="subscribe-links left">' +
          //+ '<li class="no-right"><a href="' + TWP.signin.subscribe + '/gift-subscription.html?landing=1&tid=' + tidValues.gift + '">Gift Subscriptions</a></li>'
          '</ul>'
      },
      np: {
        anon:
          '<li id="global-signin" style="min-width:32px;">' +
          '<a href="' +
          TWP.signin.loginurl_page +
          currentURL +
          '">Sign In</a>' +
          '</li>' +
          '<li><a href="' +
          TWP.signin.profileurl +
          currentURL +
          '&refresh=true">My Account </a></li>' +
          '<li id="global-registration" class="no-right" style="margin-right:25px;">' +
          '<a href="' +
          TWP.signin.registrationurl_page +
          currentURL +
          '">Register</a>' +
          '</li>',
        signedin:
          '<li id="global-signin" style="min-width:32px;">' +
          (provider.indexOf('facebook') >= 0
            ? '<a class="icon share facebook" '
            : '<span>Hello </span><a ') +
          ' href="' +
          TWP.signin.profileurl +
          currentURL +
          '&refresh=true">' +
          userName +
          '</a>' +
          '</li>' +
          '<li><a href="' +
          TWP.signin.profileurl +
          currentURL +
          '&refresh=true">My Account </a></li>' +
          '<li  id="global-registration" class="no-right" style="margin-right:25px;"><a href="' +
          TWP.signin.logouturl_page +
          '">Sign Out</a></li>'
      }
    };

    var linkString = '';
    if (TWP.Identity.paywall.pwresp.sub < 0) {
      //user is in reg mode
      if (TWP.Identity.isSignedIn) {
        linkString = signinLinks.np.signedin;
      } else {
        linkString = signinLinks.np.anon;
      }
    } else {
      //user is in paywall mode
      if (TWP.Identity.isSignedIn) {
        linkString = signinLinks.pw[TWP.Identity.paywall.pwresp.sub]; //sign in links based on subscribed/not subscribed state
      } else {
        linkString = signinLinks.pw.anon;
      }
    }

    wrapperElm.find('ul#utility-links.inline-list.left').remove();
    wrapperElm.prepend(
      '<ul id="utility-links" class="inline-list left">' + linkString + '</ul>'
    );
  };

  TWP.Identity.setHandlers = function() {
    //login
    try {
      $(window.document).on('onTwpLoginComplete', function(event, data) {
        typeof TWP_Debug != 'undefined' &&
          TWP_Debug.pagedebug &&
          window.console &&
          console.log &&
          console.log(event.type + 'fired!');
        event.stopPropagation();
        //Main Call to Re Run Authentication
        TWP.Util.User.init();
        TWP.Identity.setAuthenticationLink(data);
        //Closing Overlay!
        try {
          $('body').css('overflow-y', '');
          $('#wp_Signin.simple-overlay').overlay().close();
        } catch (e) {}
      });
    } catch (e) {}

    //gov/mil/edu overlay
    try {
      $(window.document).on('onTwpMeterReady', function(event) {
        if (
          TWP.Identity.paywall.pwresp.action === 0 &&
          TWP.Identity.paywall.pwresp.fr === 1 &&
          wapo_gme !== '1'
        ) {
          $.cookie(gmeCookie, '1', {
            domain: currDomain,
            expires: new Date(expireTime),
            path: '/'
          });
          _openOverlay(event, {
            pwresp: {
              action: 4,
              url: TWP.signin.free_access_overlay
            }
          });
        }
        /*
        setTimeout(function() {
          TWP.Identity.showMessages();
        }, 500);
        */
      });
    } catch (e) {}
    //warning overlay link to paywall overlay
    try {
      $(window.document).on('onTwpWarningFreeAccess', function(event, data) {
        _openOverlay(event, data);
      });
    } catch (e) {}
    //masthead has been built. Event triggered by external masthead ajax.
    try {
      $(window.document).on('onTwpMastheadComplete', function(event) {
        event.stopPropagation();
        TWP.Identity.setAuthenticationLink();
      });
    } catch (e) {}
    //link to sign in
    try {
      $(window.document).on('onTwpLoginInit', function(event, data) {
        _openOverlay(event, data);
      });
    } catch (e) {}
    TWP.Identity.handlersSet = true;
  };

  var copyToWindow = function copyToWindow(object) {
    for (var key in object) {
      window[key] = object[key];
    }
  };

  // check sponsorship ads for softwall action and store it in window.metaData var
  var addSponsoredAdEventListener = function () {
    var setAdVariable = (slot) => {
      var currentAdId = slot.lineItemId;
     if (currentAdId) {
       window.wpMetaData = window.wpMetaData || {};
       window.wpMetaData.adTrackerId = currentAdId;
       window.googletag
         .pubads()
         .removeEventListener('slotRenderEnded', setAdVariable);
     }
   };
   window.googletag = window.googletag || { cmd: [] };
   window.googletag.cmd.push(() => {
     window.googletag
       .pubads()
       .addEventListener('slotRenderEnded', setAdVariable);
   });
 }

  TWP.Identity.auth = function(identityData) {
    var wallTypes = {
      3: 'paywall',
      6: 'softwall',
      8: 'paywall',
      9: 'regwall'
    };
    var origUrl,
      origReferrer = document.referrer;
    if (typeof identityData != 'undefined') {
      origUrl = identityData.url;
      origReferrer = identityData.referrer;
    } else {
      origUrl =
        (window.originalWashingtonPostURl &&
          window.originalWashingtonPostURl.substring(
            window.originalWashingtonPostURl.indexOf('.com/') + 4
          )) ||
        location.pathname;
      origUrl = origUrl + location.search;
    }
    if (
      isPWA &&
      !!window.history &&
      !!history.state &&
      !!history.state.referrer
    ) {
      origReferrer = history.state.referrer;
    }

    try {
      document.domain = currDocDomain; //must match pwapiddmn in iframe include from above
      typeof TWP_Debug != 'undefined' &&
        window.console &&
        console.log &&
        console.log(
          '[' +
            (new Date() - TWP_Debug.initialTime) / 1000 +
            ']' +
            ' STARTING Paywall'
        );

      window.console &&
        console.log &&
        console.log('PAYWALL CHECK STATUS: ' + status);
      window.console &&
        console.log &&
        console.log(
          'PWAPI URL: ' +
            TWP.signin.auth_api_url +
            encodeURI(
              origUrl +
                (origUrl.indexOf('?') >= 0 ? '&' : '?') +
                'rplapisplit=1&referrer=' +
                origReferrer
            )
        );

      var successCallback = function(data) {
        if (data && data.pwresp) {
          if (data.pwresp.action === 6) {
            addSponsoredAdEventListener();
          }
          window.console &&
            console.log &&
            console.log('PAYWALL ACTION: ' + data.pwresp.action);
          window.console &&
            console.log &&
            console.log('PAYWALL SUB: ' + data.pwresp.isSubscriber);
          window.console &&
            console.log &&
            console.log('PAYWALL METERED: ' + data.pwresp.data.meterState);
          window.console &&
            console.log &&
            console.log('PAYWALL METER COUNT: ' + data.pwresp.data.meterCount);
          $.extend(TWP.Identity.paywall, eval(data));
          TWP.Identity.setAuthenticationLink();
          $(window.document).trigger('onTwpMeterReady'); //indicates pwresp is available
          document.dispatchEvent(new CustomEvent('onTwpMeterReady'));
          $(window.document).trigger('onTwpMeterComplete');
          document.dispatchEvent(new CustomEvent('onTwpMeterComplete'));
          var wallType = wallTypes[TWP.Identity.paywall.pwresp.action] || null;
          if (wallType) {
            // mark current as ready, and remaining as final
            window.registerDisplay({
              participant: wallType,
              status: 'ready'
            });
            Object.entries(wallTypes).forEach(function(element) {
              if (wallType !== element[1]) {
                window.registerDisplay({
                  participant: element[1],
                  status: 'final'
                });
              }
            });
          }
        }
      };

      /*
        errorCallback called for timeout or error
        for timeout: errTextStatusStr: 'timeout', errThrownStr: 'timeout'
        otherwise errTextStatusStr, errThrownStr is 'error' or other error string
      */
      var errorCallback = function(responseError) {
        responseError = responseError || {};
        var errMsg =
          (responseError.errTextStatusStr
            ? responseError.errTextStatusStr
            : '') +
          ' ' +
          (responseError.errThrownStr ? responseError.errThrownStr : '');

        TWP.Identity.omniture.tracking.wp_evar53 =
          'paywall_' + errMsg || 'error';
        copyToWindow(TWP.Identity.omniture.tracking);
        $(window.document).trigger('onTwpMeterComplete');
        document.dispatchEvent(new CustomEvent('onTwpMeterComplete'));
      };

      var checkDisplayStatus = function(participantStatus) {
        if (
          TWP &&
          TWP.Identity &&
          typeof TWP.Identity.paywall !== 'undefined' &&
          typeof TWP.Identity.paywall.pwresp !== 'undefined' &&
          TWP.Identity.paywall.pwresp.status === 'final'
        ) {
          // continue
        } else {
          return;
        }
        var wallType = wallTypes[TWP.Identity.paywall.pwresp.action] || null;

        if (
          wallType === participantStatus.name &&
          participantStatus.readyDisplay === true
        ) {
          _openOverlay(null, TWP.Identity.paywall.pwresp);
        }
      };
      // wait for window.registerPwapiConsumer to be available before registering callbacks to prevent race condition
      var registerCallbacks = function() {
        if (window.dQ && window.dQ.status != null) {
          //don't know at this point what will be returned, so registering all possibilities
          window.registerDisplay({
            participant: 'paywall',
            callback: checkDisplayStatus
          });
          window.registerDisplay({
            participant: 'softwall',
            callback: checkDisplayStatus
          });
          window.registerDisplay({
            participant: 'regwall',
            callback: checkDisplayStatus
          });
        }
        if (typeof window.registerPwapiConsumer === 'function') {
          window.registerPwapiConsumer(function(data) {
            if (data.status !== 'init') {
              TWP.Identity.paywall.pwresp = TWP.Identity.paywall.pwresp || {};
              if (typeof data == 'object') {
                $.extend(TWP.Identity.paywall.pwresp, data);
              }
              if (data.status == 'error') {
                errorCallback(data);
              } else {
                // open the overlay and trigger events only on a status of final
                if (data.status == 'final') {
                  successCallback({
                    pwresp: data
                  });
                  // moved to checkDisplayStatus
                  // _openOverlay(null, data);
                }
              }
            }
          });
        } else {
          setTimeout(registerCallbacks, 100);
        }
      };
      registerCallbacks();
    } catch (err) {
      $(window.document).trigger('onTwpMeterComplete');
      document.dispatchEvent(new CustomEvent('onTwpMeterComplete'));
      /*
      _logging('error', 'pwresp error: ' + err.message, {
        process: 'pwresp-processing'
      });
      */
    }
  };

  TWP.Identity.init = function() {
    setPerPageVars();
    if (!TWP.Identity.initComplete && window.top == window.self) {
      if (!TWP.Identity.handlersSet) {
        TWP.Identity.setHandlers();
      }
      // _signInInit();
      // $(document).ready(function(){
      TWP.Identity.auth();
      TWP.Identity.initComplete = true;
      // });
    }
  };

  /*
  var _getKey = function(
    cookieString,
    cookieKeyValue,
    valueDelimiter,
    keyDelimiter
  ) {
    valueDelimiter =
      typeof valueDelimiter == 'undefined' || !valueDelimiter
        ? '|'
        : valueDelimiter;
    keyDelimiter =
      typeof keyDelimiter == 'undefined' || !keyDelimiter ? ':' : keyDelimiter;
    var returnValue = null;
    if (
      cookieString == null ||
      typeof cookieString == 'undefined' ||
      cookieString.indexOf(valueDelimiter) < 0
    ) {
      //invalid delimiter
      return returnValue;
    }
    var tmpArry = cookieString.split(valueDelimiter);

    $.each(tmpArry || [], function(key, value) {
      if (value.indexOf(cookieKeyValue) >= 0) {
        if (value.indexOf(keyDelimiter) >= 0) {
          returnValue = value.split(keyDelimiter)[1];
        }
      }
    });
    return returnValue;
  };
  */

  var loadPaywallIframe = function(overlay, url) {
    var $overlay = {};
    TWP.Identity._loadModalCss();

    $overlay = $(overlay.overlay);
    $overlay.jqm(overlay.overlayConfig);
    $overlay.find('iframe').attr('src', url);
    $overlay.jqmShow();
    var perfData = (window.performance && window.performance.timing) || {};
    window.pwIframeLoaded =
      new Date().getTime() - (perfData.navigationStart || 0);
    $('.wp_signin').css('top', '60px');
    TWP &&
      TWP.Identity &&
      TWP.Identity.hideMessageArea &&
      TWP.Identity.hideMessageArea();
  };

  var _openOverlay = function (event, pwapiData) {
    var data = {};
    data.pwresp = JSON.parse(JSON.stringify(pwapiData));

    typeof TWP_Debug != 'undefined' &&
      TWP_Debug.pagedebug &&
      window.console &&
      console.log &&
      console.log(event.type + 'fired!');
    try {
      event && event.stopPropagation();
    } catch (e) {}

    try {
      var obj = $.extend({}, TWP.Identity.paywall.pwresp, data.pwresp); //merge data & TWP.Identity.paywall
      if (isPWA) {
        obj.tref = 'pwa';
      }
      var params = '';

      // TODO Verify that this can be removed.
      $.each(obj, function(i, v) {
        if (i != 'url' && i != 'locstor') {
          params = params + '&' + i + '=' + v;
        }
      });

      //add propensity response to params
      params =
        params +
        (TWP.Data.Tracking &&
        TWP.Data.Tracking.adblocked != null &&
        typeof TWP.Data.Tracking.adblocked != 'undefined'
          ? '&adb=' + TWP.Data.Tracking.adblocked
          : '');

      var baseUrl = _qaEnvironment
        ? 'https://subscribe.digitalink.com'
        : 'https://www.washingtonpost.com/subscribe';

      if (
        window.location.href.indexOf('pb-impact') >= 0 ||
        window.location.href.indexOf('local.washingtonpost') >= 0 ||
        window.location.href.indexOf('vforum-stage') >= 0 ||
        window.location.href.indexOf('washingtonpost.com/graphics/test/pub') >=
          0
      ) {
        baseUrl = 'https://subs-stage.washingtonpost.com';
      }

      var ol = false;
      try {
        //why a try/catch?  Because adblocker extensions can force an error.
        ol = (TWP && TWP.Features && TWP.Features.ol) || false;
      } catch (err) {
        //do nothing
      }

      var qs = window.location.search || '';
      var isComments =
        qs.match(/.*(outputType=comment|_template=comments-webview)/) != null;

      if (data.pwresp.action === 0) {
        return;
      } else if (ol === true) {
        return;
      } else if (isComments) {
        // don't attempt walls for comments only displays
        return;
      } else if (data.pwresp.action == 8) {
        data.pwresp.url = baseUrl + '/paywall/get-paywall';
      } else if (data.pwresp.action == 3) {
        data.pwresp.url = baseUrl + '/paywall/get-paywall';
      } else if (data.pwresp.action == 9) {
        // check if the regwall has been dismissed before
        /*
        if (document.cookie.indexOf('wp_rw=true') != -1) {
          return;
        }
        */
        if (
          window.wp_pb &&
          wp_pb.BrowserInfo &&
          wp_pb.BrowserInfo.browser == 'Explorer' &&
          wp_pb.BrowserInfo.version <= 11
        ) {
          return;
        }
        data.pwresp.url = baseUrl + '/paywall/get-regwall';
      } else if (data.pwresp.action == 6) {
        if (
          window.wp_pb &&
          wp_pb.BrowserInfo &&
          wp_pb.BrowserInfo.browser == 'Explorer' &&
          wp_pb.BrowserInfo.version <= 11
        ) {
          return;
        }
        data.pwresp.url = baseUrl + '/paywall/get-softwall';

        if (isMobile && window.googletag && window.googletag.pubadsReady) {
          var setSponsoredAdTrackerId = (slot) => {
            window.wpMetaData = window.wpMetaData || {};
            if (slot && !window.wpMetaData.adTrackerId) {
              if (slot.getResponseInformation) {
                const { sourceAgnosticLineItemId: lineId } =
                  slot.getResponseInformation() || {};
                window.wpMetaData.adTrackerId = lineId || undefined;
              }
            }
          };
          var adSlots = [];
          window.googletag
            .pubads()
            .addEventListener('impressionViewable', function(event) {
              setSponsoredAdTrackerId(event.slot);
              if (!wallClosed) {
                var slotId = event.slot.getSlotElementId();
                var isBottomAd = slotId === 'slug_fixedBottom';
                var isReEngageAd = slotId === 'slug_interstitial';
                if (event.slot.getSlotElementId() === slotId) {
                  adSlots.push(event.slot);
                }
                if (isBottomAd) {
                  window.setTimeout(function () {
                    if (!wallClosed) {
                      bottomAdClosed = true;
                      window.googletag.destroySlots(adSlots);
                      adSlots = [];
                      var iframeWindow = document.getElementById('wallIframe');
                      if (iframeWindow && iframeWindow.contentWindow) {
                        iframeWindow.contentWindow.postMessage(
                          'getHeight',
                          '*'
                        );
                      }
                    }
                  }, 5000);
                } else if (isReEngageAd && bottomAdClosed) {
                  window.googletag.destroySlots([event.slot]);
                }
              }
            });
        }
      }

      var pwSection =
        (window.TWP &&
          window.TWP.Data &&
          window.TWP.Data.Tracking &&
          window.TWP.Data.Tracking.props &&
          window.TWP.Data.Tracking.props.section) ||
        window.wp_section;
      var pwCommercialNode =
        (window.TWP &&
          window.TWP.Data &&
          window.TWP.Data.Tracking &&
          window.TWP.Data.Tracking.props &&
          window.TWP.Data.Tracking.props.commercial_node) ||
        window.wp_commercial_node;
      var pwContentType = null;
      // if ads are blocked then contentType is an array.  Otherwise a string
      if (
        window.wp_meta_data &&
        typeof window.wp_meta_data.contentType === 'string'
      ) {
        pwContentType = window.wp_meta_data.contentType;
      } else if (
        window.wp_meta_data &&
        typeof window.wp_meta_data.contentType === 'object' &&
        window.wp_meta_data.contentType
      ) {
        pwContentType = window.wp_meta_data.contentType[0];
      } else if (window && window.wp_content_type) {
        pwContentType = window.wp_content_type;
      }
      var url =
        data.pwresp.url +
        (data.pwresp.url.indexOf('?') >= 0 ? '&' : '?') +
        encodeURI(
          (pwSection !== 'undefined' ? '&section=' + pwSection : '') +
            (pwCommercialNode !== 'undefined'
              ? '&commercial_node=' + pwCommercialNode
              : '') +
            (window &&
            window.wp_meta_data &&
            window.wp_meta_data.tags_for_paywall &&
            typeof window.wp_meta_data.tags_for_paywall !== 'undefined'
              ? '&ct_tags=' + window.wp_meta_data.tags_for_paywall
              : '') +
            (window &&
            window.wp_meta_data &&
            window.wp_meta_data.tags_for_paywall_subs &&
            typeof window.wp_meta_data.tags_for_paywall_subs !== 'undefined'
              ? '&sct_tags=' + window.wp_meta_data.tags_for_paywall_subs
              : '') +
            (pwContentType !== 'undefined'
              ? '&content_type=' + pwContentType
              : '') +
            (data.pwresp.data && data.pwresp.data.wallMeterType
              ? '&wallMeterType=' + data.pwresp.data.wallMeterType
              : '') +
            '&destination=' +
            window.location.href.split('?')[0] +
            params +
            // is this coming from pb Classic?
            (window.wp_meta_data &&
            window.wp_meta_data.platform &&
            window.wp_meta_data.platform === 'pagebuilder'
              ? '&platform=pagebuilder'
              : '') +
            '&caller=classic' +
            (data.pwresp.data && data.pwresp.data.refererType
              ? '&refererType=' + data.pwresp.data.refererType
              : '')
        );

      var arcId = ((((TWP || {}).Data || {}).Tracking || {}).props || {})
        .arc_id;
      var acqEntType = ((((TWP || {}).Data || {}).Tracking || {}).props || {})
        .content_type;

      if (arcId) {
        url += '&arcId=' + arcId;
      }
      if (acqEntType) {
        url += '&acqEntType=mktg_onsite_' + acqEntType;
      } else {
        url += '&acqEntType=mktg_onsite_homepage';
      }

      window.console &&
        console.log &&
        console.log('PAYWALL OVERLAY/REDIRECT URL: ' + url);

      //if paywall, check whether to display overlay
      if (data.pwresp.action >= 3 && _isOverlayDisplayed(data) === false) {
        //manually set acqTest to 1.
        //TODO REMOVE THIS CODE WHEN IE8/9 updated
        window.location.href = url + '&acq_test=1';
        return;
      }

      //overlay may be displayed.
      var overlay = getOverlay(data.pwresp.action);
      if (typeof overlay.overlay !== 'undefined' && data.pwresp.action > 0) {
        try {
          typeof window.TWP_Debug != 'undefined' &&
            TWP_Debug.pagedebug &&
            window.console &&
            console.log &&
            console.log('Regwall: preparing to display overlay');
          typeof window.TWP_Debug != 'undefined' &&
            TWP_Debug.pagedebug &&
            window.console &&
            console.log &&
            console.log(TWP.Identity.paywall);
        } catch (e) {}

        var thisAction = data.pwresp.action;
        if (isMobile && thisAction === 1) {
          thisAction = 'mobile';
        }

        if (
          thisAction === 3 ||
          thisAction === 8 ||
          thisAction === 9
        ) {
          // this moves to "open" message
          //_showLimitedContent(thisAction);

          loadPaywallIframe(overlay, url);
        } else if (thisAction === 6) {
          // used to delay loading of the softwall until after Time to Interactive
          setTimeout(() => {
            loadPaywallIframe(overlay, url);
          }, 3500);
        }
      }
    } catch (e) {
      console.log('error opening paywall overlay/teaser', e);
    }
  };

  var _showLimitedContent = function(thisAction) {
    if (
      thisAction &&
      (thisAction === 6 ||
        thisAction === 9 ||
        thisAction === 'regwall' ||
        thisAction === 'softwall')
    ) {
      return;
    }

    var $paragraphs = $('article > *');

    // remove all article content after 50 words
    try {
      var _wordCount = 0;
      $paragraphs.each(function(i, obj) {
        if (obj.tagName == 'P') {
          var wordsRemaining = 50 - _wordCount;
          var wordsInSection = obj.innerHTML.split(' ');
          _wordCount += wordsInSection.length;
          if (_wordCount > 50) {
            obj.innerHTML =
              wordsInSection.slice(0, wordsRemaining).join(' ') + '...';
            $(obj).nextAll().remove();
            return;
          }
        }
      });
    } catch (ex) {
      // fall back to the first two paragraphs
      $paragraphs.slice(2).remove();
    }

    // keep the header locked in place on scroll
    $('#nav-bar').css('transform', 'none');

    // limit graphics content
    $('.pg-article').css({
      height: '2000px',
      overflow: 'hidden',
      position: 'relative'
    });

    // remove article furniture, preserving some ad space
    var $pbfarticlearticlebody = $('.pb-f-article-article-body');
    $pbfarticlearticlebody.nextAll().remove();

    // var $pbfadflex = $('.pb-f-ad-flex');
    // $pbfadflex.nextAll().remove();

    // remove all content from the right rail excluding ad space
    $('#right-rail > *').not('.pb-f-ad-flex').remove();

    $('article').append(
      '<p><a href="https://subscribe.washingtonpost.com?promo=o1_rv">Subscribe to read the full article</a></p>'
    );

    // revisit a second time to clear any content added later in load
    window.setTimeout(function() {
      $pbfarticlearticlebody.nextAll().remove();
      $('#right-rail > *').not('.pb-f-ad-flex').remove();
    }, 1000);
  };

  var _isOverlayDisplayed = function() {
    var displayOverlay = true;

    //Display paywall overlay for all browsers except IE version 9 and less
    //if (isMobile || typeof acqTest != 'undefined' && acqTest == "1" && (data && data.pwresp && data.pwresp.action && data.pwresp.action >=3 ) ) {
    if (
      (window.wp_pb &&
        wp_pb.BrowserInfo &&
        wp_pb.BrowserInfo.browser == 'Explorer' &&
        wp_pb.BrowserInfo.version <= 9) ||
      ($.browser && $.browser.msie && $.browser.version <= 9)
    ) {
      displayOverlay = false;
    }

    return displayOverlay;
  };

  var _loadModalCss = function() {
    if (!TWP.Identity || !TWP.Identity.uswCss) {
      var mysheet = $(
        'style[data-id*\x3d"/modal-css/"],link[href*="/modal-css/"]'
      );
      if (mysheet.length === 0) {
        try {
          var head = document.head || document.getElementsByTagName('head')[0],
            link = document.createElement('link'),
            fileName =
              '/pb/resources/css/identity-management/modal-2.0.css' +
              (window.wp_pb && window.wp_pb.resourceToken
                ? '?_=' + window.wp_pb.resourceToken
                : '');
          link.type = 'text/css';
          link.rel = 'stylesheet';
          link.href = fileName;
          head.appendChild(link);
        } catch (err) {
          //do nothing
        }
      }
      TWP.Identity.uswCss = true;
    }
  };

  /*
  var _logging = function(logType, message, state) {
    var apiMethod;
    state = state || {};
    message = message || '';
    switch (logType) {
      case 'info':
        apiMethod = 'logInfo';
        break;
      case 'success':
        apiMethod = 'logSuccess';
        break;
      case 'error':
        apiMethod = 'logHandledError';
        break;
      default:
        apiMethod = 'logInfo';
    }

    var apiEndpoint = 'https://www.washingtonpost.com/subscribe/logging/';
    if (window.location.hostname.indexOf('.digitalink.com') !== -1) {
      apiEndpoint = 'https://subscribe.digitalink.com/logging/';
    } else if (
      window.location.hostname.indexOf('pb-impact') !== -1 ||
      window.location.hostname.indexOf('impact.washpost') !== -1
    ) {
      apiEndpoint = 'https://pb-impact.washingtonpost.com/subscribe/logging/';
    }

    try {
      var xhr = new XMLHttpRequest();
      xhr.open('POST', apiEndpoint + apiMethod, true);
      xhr.setRequestHeader('Content-Type', 'application/json');

      var data = {
        appName: 'site-paywall',
        locationId: 'identity-management',
        message: message,
        state: state
      };
      xhr.withCredentials = true;
      xhr.send(JSON.stringify(data));
      xhr.onload = function() {
        //do nothing
      };
      xhr.onerror = function() {
        //do nothing
      };
    } catch (err) {
      console.error('LOGGING ERROR');
    }
  };
*/
  TWP.Identity._loadModalCss = _loadModalCss;
  TWP.Identity._openOverlay = _openOverlay;

  if (
    !window.wp_pb ||
    !wp_pb.StaticMethods ||
    !wp_pb.StaticMethods.isPageHydrated ||
    wp_pb.StaticMethods.isPageHydrated()
  ) {
    TWP.Identity.init();
  }

  // NOTE: For PWA
  __e.push([
    'shamble',
    function() {
      TWP.Identity.initComplete = false;
      TWP.Identity.init();
    }
  ]);
})(window.Zepto || window.jQuery);
